{% extends 'base.html.twig' %}

{% block title %}
    DEUS Library: Documentation
{% endblock %}

{% block content %}

    <div class="deuvo_doc">

        <a name="summary"><h2>Summary</h2></a>

        <ol>
            <li>
                <a href="#A2">Select type of geometry</a>
                <ul>
                    <li><a href="#A21">Comoving Space</a></li>
                    <li><a href="#A22">Redshift Space</a></li>
                </ul>
            </li>
            <li>
                <a href="#A1">Select your simulation and files</a>
                <ul>
                    <li><a href="#A11">What are the simulations</a></li>
                    <li><a href="#A12">How to select one</a></li>
                </ul>
            </li>
            <li>
                <a href="#A5">File Formats</a>
                <ul>
                    <li><a href="#A52">Format of the files</a></li>
                    <li><a href="#A53">How to read the file using Fortran</a></li>
                    <li><a href="#A54">How to read the file using C++</a></li>
                    <li><a href="#A55">How to read the file using other languages</a></li>
                    <li><a href="#A56">How to visualize the files</a></li>
                </ul>
            </li>
        </ol>

        <a name="A2"><h2>1. Select type of geometry</h2></a>

        <p class="img"><img src="{{ asset("images/doc/deus-library_index.png") }}" alt="Screenshot for geometry selection" style="width: 380px"/><br/>Screenshot for geometry selection</p>


        <a name="A21"><h3>Comoving Space</h3></a>

        <p><strong>What is it?</strong> Particles sorted per region</p>
        <p><strong>What are the particles properties?</strong> Position (distribution), velocity (kinematics), identity
            (follow particles from one snapshot to another)</p>
        <p><strong>What are the redshifts available?</strong> More than 10 per simulations:
            a=astart,0.025,0.05,0.1,0.15...,0.95,1</p>
        <p><strong>What are the scales probed?</strong> From 3. kpc to 10. Gpc</p>
        <p><strong>What could I do with it?</strong> Any field oriented analysis: correlation, distribution, filament,
            weak lensing, BAO...</p>

        <a name="A22"><h3>Redshift Space</h3></a>

        <p><strong>What is it?</strong> Particles sorted on a per halo basis</p>
        <p><strong>What are the particles properties?</strong> Position, velocity, identity ...</p>
        <p><strong>What are the redshifts available?</strong> More than 10 per simulations:
            a=astart,0.025,0.05,0.1,0.15...,0.95,1</p>
        <p><strong>What are the halos probed?</strong> From 2.5 .10^10 to 1. 10^16 Msun, from 100 to 3 millions
            particles.</p>
        <p><strong>What could I do with it?</strong> Any halo oriented analysis: cluster counts, strong lensing,
            statistics on macroscopic properties and internal profiles...</p>

        <p class="summary"><a href="#summary">Back to summary &#x25B2;</a></p>

        <a name="A1"><h2>2. Select your simulation</h2></a>

        <a name="A11"><h3>What are the simulations</h3></a>

        <p>Today, only DEUSS and DEUS FUR simulations are available through the web. Data from other DEUS Consortium projects as
                    DEUS PUR, will be available later on.</p>

        <p>DEUSS consists in 5 N-body simulations with 2048^3 particles, 9 simulations with 1024^3 particles (plus some
            512^3 and 256^3 particles simulations for tests or convergence studies). We have explored three cosmologies:
            LCDM WMAP5 (lcdmw5), quintessence with Ratra-Peebles potential (rpcdmw5) and quintessence with Supergravity
            corrections (sucdmw5). Box lengthes are 2592 Mpc/h, 648 Mpc/h and 162 Mpc/h. All the simulations share the
            same realization of the initial density field and have been run with the same code: RAMSES, modified for
            quintessence.</p>

        <p>The goal of this simulation suite is to investigate the imprints of dark energy on cosmic structure formation
            at various scales from Gpc to kpc and for various realistic cosmologies calibrated on CMB and SNIa.</p>

        <p><a href="http://www.deus-consortium.org/a-propos/cosmological-models/">More informations about the
                simulations are available on the site.</a></p>

        <a name="A12"><h3>How to select one</h3></a>

        <p>The simulations are sorted in a table by box length and cosmology. In each cell, you'll find the available
            resolution for the combination.
            Just click on the one you want to select it.</p>
        <p class="img"><img src="{{ asset("images/doc/deus-library_1_simulation.png") }}" alt="simulation" style="width: 480px;"/><br/>Screenshot for simulation selection</p>

        <p>When selected, the simulation properties appears below as well as the available snapshots. </p>
        <p class="img"><img src="{{ asset("images/doc/deus-library_2_snapshot.png") }}" alt="snapshot" style="width: 480px;"/><br/>Screenshot for snapshot
            selection</p>

        <p>When a snapshot is selected, his own properties appear below the simulation ones as well as the available objects and their formats.</p>
        <p class="img"><img src="{{ asset("images/doc/deus-library_3_file.png") }}" alt="file" style="width: 480px;"/><br/>Screenshot for object
            selection</p>

        <p>When an object is select, the corresponding files appear to be downloaded.</p>
        <p class="img"><img src="{{ asset("images/doc/deus-library_4_download.png") }}" alt="download" style="width: 480px;"/><br/>Screenshot for download
            selection</p>

        <p>It is both possible to download the file list as a text file to use with wget, or to download files individually</p>

        <p class="summary"><a href="#summary">Back to summary &#x25B2;</a></p>


        <a name="A5"><h2>3. File Formats</h2></a>

        <a name="A52"><h3>Format of the files</h3></a>

        <p>The Field and Halo files are binary big endian unformated Fortran files.</p>

        <p>They can be read natively in Fortran, or using a provided library in C++ as described below.
            Libraries for other languages will be provided later on, some tips are given below to create yours.</p>

        <h4>Field file description</h4>

        <table>
            <tr>
                <td>npart</td>
                <td>integer(4)</td>
                <td>Number of particles in the field</td>
            </tr>
            <tr>
                <td>procid</td>
                <td>integer(4)</td>
                <td>ID of the cube</td>
            </tr>
            <tr>
                <td>boundaries</td>
                <td>real(4)*6</td>
                <td>xmin,xmax,ymin,ymax,zmin,zmax</td>
            </tr>
            <tr>
                <td>positions</td>
                <td>real(4)*3*npart</td>
                <td>x,y,z position of each particles</td>
            </tr>
            <tr>
                <td>velocities</td>
                <td>real(4)*3*npart</td>
                <td>vx,vy,vz velocity of each particles</td>
            </tr>
            <tr>
                <td>ids</td>
                <td>int(8)*npart</td>
                <td>unique id of each particle</td>
            </tr>
        </table>

        <h4>Halo file description</h4>

        <table>
            <tr>
                <td>nhalos</td>
                <td>integer(4)</td>
                <td>Number of halos in the file</td>
            </tr>
        </table>

        <p>Then, for each halo:</p>

        <table>
            <tr>
                <td>npart</td>
                <td>integer(4)</td>
                <td>Number of particles in the field</td>
            </tr>
            <tr>
                <td>positions</td>
                <td>real(4)*3*npart</td>
                <td>x,y,z position of each particles</td>
            </tr>
            <tr>
                <td>velocities</td>
                <td>real(4)*3*npart</td>
                <td>vx,vy,vz velocity of each particles</td>
            </tr>
            <tr>
                <td>ids</td>
                <td>int(8)*npart</td>
                <td>unique id of each particle</td>
            </tr>
        </table>

        <a name="A53"><h3>How to read the file using Fortran</h3></a>

        <p>The different files are created using Fortran, so they can easily be read using this language.</p>

        <p>However, be careful that they have been generated from Big Endian supercomputers
            so you need to use the proper compiler setting to read them correctly. <br/>For instance, using ifort:</p>
        <pre>       ifort <strong>-convert big_endian</strong> -O3 my_program.f90 -o my_program</pre>

        <h4>Read Field file in Fortran</h4>

        <p>Program sample to read a field file:</p>

                <pre><xmp>program read_field
    implicit none

    integer::mynpart,procID,Ucub,j,i
    real::xmin,xmax,ymin,ymax,zmin,zmax
    integer(8),allocatable::id(:)
    real,allocatable::x(:,:),v(:,:)

    Open(Unit=Ucub,file='/path_for_data/fof_boxlen648_n1024_lcdmw5_cube_00001',Form='Unformatted')
    ! read number of particles integer*4
    Read(Ucub) mynpart
    ! read ID of the FoF process assigned to this cube integer*4
    Read(Ucub) procID
    ! read boundary values of the cube real*4
    Read(Ucub) xmin,xmax,ymin,ymax,zmin,zmax
    ! allocate memory
    allocate(id(1:mynpart))
    allocate(x(1:3,1:mynpart))
    allocate(v(1:3,1:mynpart))
    ! read positions real*4
    Read(Ucub) ((x(j,i),j=1,3),i=1,mynpart)
    ! read velocities real*4
    Read(Ucub) ((v(j,i),j=1,3),i=1,mynpart)
    ! read id's integer*8 WARNING
    Read(Ucub) (id(i),i=1,mynpart)
    Close(Ucub)

end program read_field
                    </xmp></pre>

        <h4>Read Halo file in Fortran</h4>

        <p>Program sample to read the 1st halo of a halo file:</p>

            <pre><xmp> program read_struct
    implicit none

    integer::mynpart,procID,Ucub,j,i,mynhalos
    real::xmin,xmax,ymin,ymax,zmin,zmax
    integer(8),allocatable::id(:)
    real,allocatable::x(:,:),v(:,:)

    Open(Unit=Ucub,file='/path_for_data/fof_boxlen648_n1024_lcdmw5_strct_00001',Form='Unformatted')
    ! read number of halos integer*4
    Read(Ucub) mynhalos

    ! READ 1st HALO ONLY
    ! read number of particles integer*4
    Read(Ucub) mynpart
    ! allocate memory
    allocate(id(1:mynpart))
    allocate(x(1:3,1:mynpart))
    allocate(v(1:3,1:mynpart))
    ! read positions real*4
    Read(Ucub) ((x(j,i),j=1,3),i=1,mynpart)
    ! read velocities real*4
    Read(Ucub) ((v(j,i),j=1,3),i=1,mynpart)
    ! read id's integer*8 WARNING
    Read(Ucub) (id(i),i=1,mynpart)

    Close(Ucub)

end program read_struct
                </xmp></pre>

        <a name="A54"><h3>How to read the file using C++</h3></a>

        <p>For C++, a special library has been created, FOFReaderLib that you can find on GitHub:<br/>
            <a href="https://github.com/pasdeloup/FOFReaderLib">https://github.com/pasdeloup/FOFReaderLib</a>
        </p>

        <h4>Read Field file in C++</h4>

        <p>Program sample to read the a field file and display some infos about it:</p>

            <pre><xmp>#include "FOFReaderLib/FOFReaderLib.h"

int main(void)
{
    // Simple line to read a Field. The second arg is to ask reading the ids (default is false)
    FOFCube cube("/path_for_data/fof_boxlen648_n1024_lcdmw5_cube_00001", true);

    // Show some details about the read cube as an example of usage
    std::cout
    << cube.npart() << " particles, "
    << "area: (" << cube.minX() << "," << cube.minY() << "," << cube.minZ() << ") "
    << "to (" << cube.maxX() << "," << cube.maxY() << "," << cube.maxZ() << ")"
    << std::endl;
    for(int j=0; j< std::min(10,cube.npart()); j++) {
    std::cout << " Particle " << j << ": "
    << "id: " << cube.id(j) << " "
    << "position: (" << cube.posX(j) << "," << cube.posY(j) << "," << cube.posZ(j) << ") "
    << "velocity (" << cube.velX(j) << "," << cube.velY(j) << "," << cube.velZ(j) << ")"
    << std::endl;
    }
return 0;
}
                </xmp></pre>

        <h4>Read Halo file in C++</h4>

        <p>Program sample to read the a halo file and display some infos about each halo:</p>

            <pre><xmp>#include "FOFReaderLib/FOFReaderLib.h"

int main(void)
{
    // Simple line to read a list of halos
    FOFStrct strct("/path_for_data/fof_boxlen648_n1024_lcdmw5_strct_00001");

    // List the halos from the file as an example of usage
    for(int i=0; i
    <strct.nHalos
    (); i++) {
    std::cout << "HALO " << i << ": "
    << strct.halos(i)->npart() << " particles"
    << std::endl;
    }
    return 0;
}
</xmp></pre>

        <a name="A55"><h3>How to read the file using other languages</h3></a>

        <p>To read the files in other languages, you need to be able to read Fortran binary files, and to manage Big
            Endianess</p>

        <h4>Read Fortran binary files</h4>

        <p>In Fortran, each Write command add a record marker before and after the data. This record marker is a 4 byte
            integer giving the number of bytes wrotten.</p>

        <p>For instance, to read the (x,y,z) coordinates of 200 particles, you will find 200*3*4 + 2*4 = 2408 bytes:</p>
            <pre><xmp>
    4 bytes: head record marker, integer = 2400
    4 bytes: x coordinate of the 1st particle, float
    4 bytes: y coordinate of the 1st particle, float
    4 bytes: z coordinate of the 1st particle, float
    4 bytes: x coordinate of the 2nd particle, float
    4 bytes: y coordinate of the 2nd particle, float
    4 bytes: z coordinate of the 2nd particle, float
    (...)
    4 bytes: x coordinate of the 200th particle, float
    4 bytes: y coordinate of the 200th particle, float
    4 bytes: z coordinate of the 200th particle, float
    4 bytes: foot record marker, integer = 2400
                </xmp></pre>

        <h4>Read Big Endian Files</h4>

        <p>Bytes can be wrotten either in Big Endian (BE) or Little Endian (LE) on a computer, LE being the most common.
            <a href="http://en.wikipedia.org/wiki/Endianness">http://en.wikipedia.org/wiki/Endianness</a></p>

        <p>To read BE files on a LE computer, some languages like Fortran allow to easily switch using a compiler
            option, or have special functions.</p>

        <p>If you don't have, you'll need to manually swap the order of the bits composing each byte. That's what is
            done in the C++ FOFReaderLib library.</p>


        <a name="A56"><h3>How to visualize the files</h3></a>

        <p>To visualize field and halos in real time, a <a href="http://paraview.org/">Paraview</a> plugin will soon be
            available.</p>
        <p>Be careful that a powerful GPU is needed for fields or big halos.</p>

        <p>For raytracing images, a <a href="http://www.mpa-garching.mpg.de/~kdolag/Splotch/">Splotch</a> plugin will
            also soon be available.</p>

        <p class="summary"><a href="#summary">Back to summary &#x25B2;</a></p>

        <br/>
    </div>

{% endblock %}

{% block stylesheets %}

{% endblock %}
